// ローディングのCSS
//bodyにappearクラスがついたら出現============================
body.appear .p-top-mask {
    display: block;
    content: "";
    position:fixed;
    width: 100%;
    height: 50vh;
    transform: scaleY(0);
	animation-duration: 0.9s;
	animation-timing-function: ease-in-out;
	animation-fill-mode: forwards;
	@include mq("md") {
		height: 100vh;
		width: 50%;
	}

	// 左画面の図形アニメーション
	&--left {
		top: 0;
		left: 0;
		background-color: $color-main-yellow;
		animation-name: left_right;
		@include mq("md") {
			animation-name: bottom_top;
		}
	}

	// 右画面の図形アニメーション
	&--right {
		top: 50%;
		left: 0;
		animation-name: right_left;
		background-color: $color-main-blue;
		animation-delay: 0.9s;
		@include mq("md") {
			top: 0;
			left: 50%;
			animation-name:top_bottom;
		}
	}
}

// スマホ時、下から上に伸びるマスク
@keyframes bottom_top {
	0% {
		transform-origin:bottom;
		transform:scaleY(0);
	}
	100% {
		transform-origin:bottom;
		transform:scaleY(1);
	}
}

// スマホ時、上から下に伸びるマスク
@keyframes top_bottom {
	0% {
		transform-origin:top;
		transform:scaleY(0);
	}
	100% {
		transform-origin:top;
		transform:scaleY(1);
	}
}

// 左から右に伸びるマスク
@keyframes left_right {
	0% {
		transform-origin:left;
		transform:scaleX(0);
	}
	100% {
		transform-origin:left;
		transform:scaleX(1);
	}
}

// 右から左に伸びるマスク
@keyframes right_left {
	0% {
		transform-origin:right;
		transform:scaleX(0);
	}
	100% {
		transform-origin:right;
		transform:scaleX(1);
	}
}

//画面遷移の後現れるコンテンツ設定
.txt{
	opacity: 0;
}

//bodyにappearクラスがついたら出現==============================
// Takeaki ishidaの文字をぼかしながら表示するアニメーション
body.appear .txt {
	animation-name:TxtAnimeAppear;
	animation-delay: 1.8s;
	animation-duration:2.1s;
	animation-fill-mode:forwards;
	opacity: 0;
}

@keyframes TxtAnimeAppear {
	0% {
		opacity: 0;
		filter: blur(80px);
		transform: scale(1.02);
	}
	100% {
		opacity: 1;
		filter: blur(0);
		transform: scale(1);
	}
}

//bodyにColorAppearクラスがついたら出現=============================
// Takeaki ishidaの文字に色をつけるアニメーション
body.ColorAppear  .color{
	animation-duration:1s;
	animation-fill-mode:forwards;
	opacity: 1;
	display: inline;
	margin-left: 0;
	letter-spacing: 0;

	&--gray {
		animation-name: ColorAnimeGray;
	}

	&--white {
		animation-name: ColorAnimeWhite;
	}

	&.color1 {
		animation-delay: 0s;
	}

	&.color3 {
		animation-delay: 0.1s;
	}

	&.color4 {
		animation-delay: 0.2s;
	}

	&.color5 {
		animation-delay: 0.3s;
	}

	&.color6 {
		animation-delay: 0.4s;
	}

	&.color7 {
		animation-delay: 0.5s;
	}

	&.color8 {
		animation-delay: 0.6s;
	}

	&.color9 {
		animation-delay: 0.7s;
	}

	&.color10 {
		animation-delay: 0.8s;
	}

	&.color11 {
		animation-delay: 0.9s;
	}

	&.color12 {
		animation-delay: 1s;
	}

	&.color13 {
		animation-delay: 1.1s;
	}
}

@keyframes ColorAnimeGray {
	0% {
		color: #fff;
		opacity: 1;
	}
	100% {
		color: $color-main-gray;
		opacity: 1;
	}
}

@keyframes ColorAnimeWhite {
	0% {
		color: $color-main-gray;
		opacity: 1;
	}
	100% {
		color: #fff;
		opacity: 1;
	}
}

// ページトップへ戻る
#page-top {
	display: none;
	position: fixed;
	right: 30px;
	bottom: 31px;
	z-index: 99999;

	a {
		display: flex;
		justify-content:center;
		align-items:center;
		background: $color-main-blue;
		color: #fff;
		width: 60px;
		height: 60px;
		border-radius: 100%;

		&::before {
			content: '';
			width: 25px;
			height: 25px;
			border-top: solid 2px #fff;
			border-right: solid 2px #fff;
			margin-top: 25%;
			transform: rotate(-45deg);
		}

		&:hover {
			opacity: 1;
		}		
	}
}

// ハンバーガーメニュー
// クリック後にバツ印にする
.l-header-hamburger__area .is-activeMenu {

	&:nth-of-type(1) {
		top: 18px;
		left: 10px;
		transform: translateY(6px) rotate(-45deg) ;

	}

	&:nth-of-type(2) {
		opacity: 0;
	}

	&:nth-of-type(3) {
		top: 30px;
		left: 10px;
		transform: translateY(-6px) rotate(45deg);

		&::after {
			content:"close";
			transform: translateY(0) rotate(-45deg);
			top:5px;
			left:50%;
		}
	}
}

// 表示するメニューに高さを出す
.is-heightChange {
	display: block !important;
	width: 100%;
	height: 100vh;
	position: fixed;
	top: 0;
	z-index: 9999;
}